/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as TrophyApi from "../../..";
export declare namespace Metrics {
    interface Options {
        environment?: core.Supplier<environments.TrophyApiEnvironment | environments.TrophyApiEnvironmentUrls>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Metrics {
    protected readonly _options: Metrics.Options;
    constructor(_options: Metrics.Options);
    /**
     * Increment or decrement the value of a metric for a user.
     * @throws {@link TrophyApi.BadRequestError}
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.UnprocessableEntityError}
     *
     * @example
     *     await trophyApi.metrics.event("words-written", {
     *         idempotencyKey: "e4296e4b-8493-4bd1-9c30-5a1a9ac4d78f",
     *         user: {
     *             email: "user@example.com",
     *             tz: "Europe/London",
     *             attributes: {
     *                 "department": "engineering",
     *                 "role": "developer"
     *             },
     *             id: "18"
     *         },
     *         value: 750,
     *         attributes: {
     *             "category": "writing",
     *             "source": "mobile-app"
     *         }
     *     })
     */
    event(key: string, request: TrophyApi.MetricsEventRequest, requestOptions?: Metrics.RequestOptions): Promise<TrophyApi.EventResponse>;
}
