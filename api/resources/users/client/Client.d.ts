/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as TrophyApi from "../../..";
export declare namespace Users {
    interface Options {
        environment?: core.Supplier<environments.TrophyApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Users {
    protected readonly _options: Users.Options;
    constructor(_options: Users.Options);
    /**
     * Get a single user's progress against all active metrics.
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.NotFoundError}
     * @throws {@link TrophyApi.UnprocessableEntityError}
     *
     * @example
     *     await trophyApi.users.allmetrics("userId")
     */
    allmetrics(userId: string, requestOptions?: Users.RequestOptions): Promise<TrophyApi.MetricResponse[]>;
    /**
     * Get a user's progress against a single active metric.
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.NotFoundError}
     * @throws {@link TrophyApi.UnprocessableEntityError}
     *
     * @example
     *     await trophyApi.users.singlemetric("userId", "key")
     */
    singlemetric(userId: string, key: string, requestOptions?: Users.RequestOptions): Promise<TrophyApi.MetricResponse>;
    /**
     * Get all of a user's completed achievements.
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.NotFoundError}
     * @throws {@link TrophyApi.UnprocessableEntityError}
     *
     * @example
     *     await trophyApi.users.allachievements("userId")
     */
    allachievements(userId: string, requestOptions?: Users.RequestOptions): Promise<TrophyApi.AchievementResponse[]>;
}
