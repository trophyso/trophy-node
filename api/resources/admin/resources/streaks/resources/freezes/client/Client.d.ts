/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as TrophyApi from "../../../../../../..";
export declare namespace Freezes {
    interface Options {
        environment?: core.Supplier<environments.TrophyApiEnvironment | environments.TrophyApiEnvironmentUrls>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Freezes {
    protected readonly _options: Freezes.Options;
    constructor(_options: Freezes.Options);
    /**
     * Create streak freezes for multiple users.
     * @throws {@link TrophyApi.BadRequestError}
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.UnprocessableEntityError}
     *
     * @example
     *     await trophyApi.admin.streaks.freezes.create({
     *         freezes: [{
     *                 userId: "user-123"
     *             }, {
     *                 userId: "user-456"
     *             }, {
     *                 userId: "user-123"
     *             }]
     *     })
     *
     * @example
     *     await trophyApi.admin.streaks.freezes.create({
     *         freezes: [{
     *                 userId: "user-123"
     *             }, {
     *                 userId: "user-456"
     *             }, {
     *                 userId: "user-123"
     *             }]
     *     })
     *
     * @example
     *     await trophyApi.admin.streaks.freezes.create({
     *         freezes: [{
     *                 userId: "user-123"
     *             }, {
     *                 userId: "user-456"
     *             }, {
     *                 userId: "user-123"
     *             }]
     *     })
     */
    create(request: TrophyApi.admin.streaks.CreateStreakFreezesRequest, requestOptions?: Freezes.RequestOptions): Promise<TrophyApi.CreateStreakFreezesResponse>;
}
