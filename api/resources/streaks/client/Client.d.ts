/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as TrophyApi from "../../..";
export declare namespace Streaks {
    interface Options {
        environment?: core.Supplier<environments.TrophyApiEnvironment | environments.TrophyApiEnvironmentUrls>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Streaks {
    protected readonly _options: Streaks.Options;
    constructor(_options: Streaks.Options);
    /**
     * Get the streak lengths of a list of users, ranked by streak length from longest to shortest.
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.UnprocessableEntityError}
     *
     * @example
     *     await trophyApi.streaks.list({})
     */
    list(request?: TrophyApi.StreaksListRequest, requestOptions?: Streaks.RequestOptions): Promise<TrophyApi.BulkStreakResponse>;
    /**
     * Get the top users by streak length (active or longest).
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.UnprocessableEntityError}
     *
     * @example
     *     await trophyApi.streaks.rankings({
     *         limit: 1,
     *         type: TrophyApi.StreaksRankingsRequestType.Active
     *     })
     */
    rankings(request?: TrophyApi.StreaksRankingsRequest, requestOptions?: Streaks.RequestOptions): Promise<TrophyApi.StreakRankingUser[]>;
}
