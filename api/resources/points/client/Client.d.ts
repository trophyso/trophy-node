/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as TrophyApi from "../../..";
export declare namespace Points {
    interface Options {
        environment?: core.Supplier<environments.TrophyApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Points {
    protected readonly _options: Points.Options;
    constructor(_options: Points.Options);
    /**
     * Get a breakdown of the number of users with points in each range.
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.NotFoundError}
     * @throws {@link TrophyApi.UnprocessableEntityError}
     *
     * @example
     *     await trophyApi.points.summary("points-system-key", {
     *         userAttributes: "plan-type:premium,region:us-east"
     *     })
     */
    summary(key: string, request?: TrophyApi.PointsSummaryRequest, requestOptions?: Points.RequestOptions): Promise<TrophyApi.PointsSummaryResponse>;
    /**
     * Get a points system with all its triggers.
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.NotFoundError}
     *
     * @example
     *     await trophyApi.points.system("points-system-key")
     */
    system(key: string, requestOptions?: Points.RequestOptions): Promise<TrophyApi.PointsSystemResponse>;
}
