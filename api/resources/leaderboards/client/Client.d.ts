/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as TrophyApi from "../../..";
export declare namespace Leaderboards {
    interface Options {
        environment?: core.Supplier<environments.TrophyApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Leaderboards {
    protected readonly _options: Leaderboards.Options;
    constructor(_options: Leaderboards.Options);
    /**
     * Get all active leaderboards for your organization.
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.UnprocessableEntityError}
     *
     * @example
     *     await trophyApi.leaderboards.all()
     */
    all(requestOptions?: Leaderboards.RequestOptions): Promise<TrophyApi.LeaderboardResponse[]>;
    /**
     * Get a specific leaderboard by its key.
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.NotFoundError}
     * @throws {@link TrophyApi.UnprocessableEntityError}
     *
     * @example
     *     await trophyApi.leaderboards.get("weekly-words", {
     *         run: "2025-01-15",
     *         userId: "user-123"
     *     })
     */
    get(key: string, request?: TrophyApi.LeaderboardsGetRequest, requestOptions?: Leaderboards.RequestOptions): Promise<TrophyApi.LeaderboardResponseWithRankings>;
    /**
     * Get a user's rank, value, and history for a specific leaderboard.
     * @throws {@link TrophyApi.UnauthorizedError}
     * @throws {@link TrophyApi.NotFoundError}
     * @throws {@link TrophyApi.UnprocessableEntityError}
     *
     * @example
     *     await trophyApi.leaderboards.usersLeaderboards("user-123", "weekly-words", {
     *         run: "2025-01-15"
     *     })
     */
    usersLeaderboards(userId: string, key: string, request?: TrophyApi.UsersLeaderboardsRequest, requestOptions?: Leaderboards.RequestOptions): Promise<TrophyApi.UserLeaderboardResponse>;
}
